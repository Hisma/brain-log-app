// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id           Int               @id @default(autoincrement())
  username     String            @unique
  passwordHash String
  displayName  String
  createdAt    DateTime          @default(now())
  lastLogin    DateTime?
  timezone     String            @default("America/New_York") // User's timezone for date handling
  theme        String            @default("system") // "light", "dark", or "system"
  dailyLogs    DailyLog[]
  weeklyReflections WeeklyReflection[]
}

// Daily log model with time-based sections
model DailyLog {
  id                       Int      @id @default(autoincrement())
  userId                   Int
  date                     DateTime
  
  // Morning check-in fields (7-9am)
  sleepHours               Float    @default(0)
  sleepQuality             Int      @default(0) // 1-10 scale
  dreams                   String?
  morningMood              Int      @default(0) // 1-10 scale
  physicalStatus           String?
  breakfast                String?  // New field
  morningCompleted         Boolean  @default(false) // New field
  
  // Concerta dose log fields (9-10am)
  medicationTaken          Boolean  @default(false) // Modified field
  medicationTakenAt        DateTime? // Existing field, changed to DateTime
  medicationDose           Float    @default(0) // Existing field
  ateWithinHour            Boolean  @default(false) // Existing field
  firstHourFeeling         String?  // Existing field
  reasonForSkipping        String?  // New field
  medicationCompleted      Boolean  @default(false) // New field
  
  // Mid-day check-in fields (11am-1pm)
  lunch                    String?  // New field
  focusLevel               Int      @default(0) // Existing field
  energyLevel              Int      @default(0) // Existing field
  ruminationLevel          Int      @default(0) // Existing field
  currentActivity          String?  // New field
  distractions             String?  // New field
  mainTrigger              String?  // Existing field
  responseMethod           String[] @default([]) // Existing field
  middayCompleted          Boolean  @default(false) // New field
  
  // Afternoon check-in fields (3-5pm)
  afternoonSnack           String?  // New field
  isCrashing               Boolean  @default(false) // New field
  crashSymptoms            String?  // New field
  anxietyLevel             Int?     // New field
  isFeeling                String?  // New field
  hadTriggeringInteraction Boolean  @default(false) // Existing field
  interactionDetails       String?  // Existing field
  selfWorthTiedToPerformance String? // Existing field
  overextended             String?  // Existing field
  afternoonCompleted       Boolean  @default(false) // New field
  
  // Evening reflection fields (8-10pm)
  dinner                   String?  // New field
  overallMood              Int      @default(0) // Existing field
  sleepiness               Int?     // New field
  medicationEffectiveness  String?  // Existing field
  helpfulFactors           String?  // Existing field
  distractingFactors       String?  // Existing field
  thoughtForTomorrow       String?  // Existing field
  eveningCompleted         Boolean  @default(false) // New field
  
  // Additional fields
  dayRating                Int?     // 1-10 scale
  accomplishments          String?
  challenges               String?
  gratitude                String?
  improvements             String?
  isComplete               Boolean  @default(false)
  
  // Relationships
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([date])
  @@unique([userId, date])
}

// Weekly reflection model
model WeeklyReflection {
  id                     Int      @id @default(autoincrement())
  userId                 Int
  weekStartDate          DateTime
  weekEndDate            DateTime
  
  // Calculated fields
  averageRuminationScore Float    @default(0)
  stableDaysCount        Int      @default(0)
  medicationEffectiveDays Int     @default(0)
  questionedLeavingJob   Boolean  @default(false)
  weeklyInsight          String?
  
  // Reflection fields
  weekRating             Int?     // 1-10 scale
  mentalState            String?
  physicalState          String?
  weekHighlights         String?
  weekChallenges         String?
  lessonsLearned         String?
  nextWeekFocus          String?
  
  // Relationships
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([weekStartDate])
  @@index([weekEndDate])
  @@unique([userId, weekStartDate, weekEndDate])
}
